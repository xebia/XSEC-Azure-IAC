name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:
  workflow_dispatch:
permissions:
  contents: read
jobs:
  # tfsec:
  #   name: tfsec
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Clone repo
  #       uses: actions/checkout@master
  #     - name: tfsec
  #       uses: aquasecurity/tfsec-action@v1.0.0
  #       with:
  #         working_directory: ./
  Checkov:
    name: Checkov
    # needs: tfsec
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@442591657ff91d40951ae71ad427c9919ca5ac98
        with:
          directory: ./
          framework: terraform
  terraform:
    name: Terraform
    needs: Checkov
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: production
# Use the Bash shell regardless of whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest.
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
# Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
# Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: for i in $(find . -name main.tf | cut -d "/" -f 2); do terraform -chdir=$i init; done
# Generates an execution plan for Terraform
    - name: Terraform Plan
      run: for i in $(find . -name main.tf | cut -d "/" -f 2); do terraform -chdir=$i plan -input=false; done
# Apply Terraform changes
    - name: Terraform Apply
      run: for i in $(find . -name main.tf | cut -d "/" -f 2); do terraform -chdir=$i apply --auto-approve -input=false; done
      